//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 技术平台公共类库 消息队列
//  @ File Name : queue.h
//  @ Date : 2013/6/6
//  @ Author : disp
//
//


#if !defined(_CQUEUE_H)
#define _CQUEUE_H

#include <sys/types.h>
#include <sys/ipc.h>	
#include <sys/msg.h>

#define QUEUE_ACCESS 	0660
#define MSGTYPE_NULL	0
#define MSGTYPE_NORMAL	1
#define MSGTYPE_CONSL 	2
#define MSGTYPE_REPLY 	3
#define MSGTYPE_DICT  	10

#define MSGMAX          (4194304)
#define MAXQUEIODATA    (4200)

struct ncbs_msgdatabuf
{
	int qid;
	int seqno;
	char mtext[100];
};
struct ncbs_msgbuf
{
	long mtype;	//MSGTYPE_NORMAL
	struct ncbs_msgdatabuf data;
};


class CQueue
{
public:
	CQueue();
	~CQueue();	
	
public:
    int CreateQueue(key_t key, int flag = QUEUE_ACCESS|IPC_CREAT|IPC_EXCL);	//创建新的消息队列
    int SelectQueue(key_t key);																							//选择已经存在的消息队列
    int SendMsg(void* data, int len);										//阻塞方式发送消息										//阻塞方式发送消息
    int SendMsg_NOWAIT(void* data, int len);								//非阻塞方式发送消息									//非阻塞方式发送消息
    int ReceiveMsg(void* data, int len, long type = MSGTYPE_NORMAL);		//阻塞方式接收消息
    int ReceiveMsg_NOWAIT(void* data, int len, long type = MSGTYPE_NORMAL);	//非阻塞方式接收消息
    int ReceiveMsg_TIME(void* data, int len, int timeout,long type = MSGTYPE_NORMAL);	//可设定超时的接收消息    
    int PrintStat();																												//打印消息队列的状态
    int CheckMsg(long type = MSGTYPE_NORMAL);																//检查指定类型的消息是否到达（不接收）
    int DeleteQueue();																											//删除当前的消息队列

	int GetStat(struct msqid_ds * pDs);
	
public:
		//void SetQueueId(int id) { m_nQueueId = id; };	
		//int GetQueueId() { return m_nQueueId; };
		
    static bool m_bAlarmExpired;
	static void SignalAlarmCatch(int sig);
	    
protected:
    int m_nQueueId;																													//消息队列标识符
};

#endif  //_CQUEUE_H
