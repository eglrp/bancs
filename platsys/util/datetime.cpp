//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 日期时间处理类
//  @ File Name : datetime.cpp
//  @ Date : 2014/5/6
//  @ Author : disp
//
//

#include "datetime.h"


CDateTime::CDateTime()
{
    m_nYear  = -1;
}

CDateTime::CDateTime (const CDateTime & dtSrc)
{
    //构造函数中避免使用虚函数，以及this
    m_nYear  = dtSrc.GetYear();
    m_nMonth = dtSrc.GetMonth();
    m_nDay   = dtSrc.GetDay();
    m_nHour  = dtSrc.GetHour();
    m_nMinute= dtSrc.GetMinute();
    m_nSecond= dtSrc.GetSecond();    
    
}

CDateTime::CDateTime (int year, int month, int day)
{
    m_nYear  = year;
    m_nMonth = month;
    m_nDay   = day;
    
}

CDateTime::CDateTime(int year, int month, int day, int hour, int minute, int second)
{
    m_nYear  = year;
    m_nMonth = month;
    m_nDay   = day;
    m_nHour  = hour;
    m_nMinute= minute;
    m_nSecond= second;    
    
}
    
CDateTime::~CDateTime()
{

}

CDateTime& CDateTime::operator= (const CDateTime& dt)
{
    m_nYear  = dt.GetYear();
    m_nMonth = dt.GetMonth();
    m_nDay   = dt.GetDay();
    m_nHour  = dt.GetHour();
    m_nMinute= dt.GetMinute();
    m_nSecond= dt.GetSecond();

    return *this;
}

bool CDateTime:: operator<(const CDateTime& dt) const
{
    //仅比较日期
    if( m_nYear < dt.GetYear())
        return true;
    else if(m_nYear == dt.GetYear() && m_nMonth < dt.GetMonth())
        return true;
    else if(m_nYear == dt.GetYear() && m_nMonth == dt.GetMonth() && m_nDay < dt.GetDay())
        return true; 
    else
        return false;
 
}    
    
CDateTime CDateTime::GetCurrentTime()
{
    
    time_t curtime = time(NULL);
	if(curtime == 0)
		return CDateTime(-1,-1,-1);
		
	//struct timeval tp;
	//gettimeofday(&tp,NULL);	

    struct tm *tm_now;
    tm_now=localtime(&curtime);
    tm_now->tm_year += 1900;
    tm_now->tm_mon ++;
    
    return CDateTime(tm_now->tm_year,tm_now->tm_mon,tm_now->tm_mday,tm_now->tm_hour,tm_now->tm_min,tm_now->tm_sec);
    
}

CDateTime CDateTime::Now()
{
    return GetCurrentTime();
}

CDateTime CDateTime::FromText(const char* pSrc,const char*  pFormat)  //YYYYMMDD、DDMMYYYY、MMDDYYYY
{
    CString strSrc(pSrc),strFormat(pFormat); 
    if(strSrc.GetLength()<8 || !strSrc.IsNumeric() )
        return CDateTime(-1,-1,-1);
        
    strSrc = strSrc.Left(8);
        
    int year,month,day;
    if(strFormat == "YYYYMMDD")
    {
        year    = atoi(strSrc.Mid(0,4).c_str());
        month   = atoi(strSrc.Mid(4,2).c_str());
        day     = atoi(strSrc.Mid(6,2).c_str());                
    }
    else if(strFormat == "DDMMYYYY")
    {
        year    = atoi(strSrc.Mid(4,4).c_str());
        month   = atoi(strSrc.Mid(2,2).c_str());
        day     = atoi(strSrc.Mid(0,2).c_str());                
    }   
    else if(strFormat == "MMDDYYYY")
    {
        year    = atoi(strSrc.Mid(4,4).c_str());
        month   = atoi(strSrc.Mid(0,2).c_str());
        day     = atoi(strSrc.Mid(2,2).c_str());                
    }     
    else
    {
      year=-1;  
    }
    
    return CDateTime(year,month,day);
    
}

bool CDateTime::IsLeapYear(int year)
{
    return (
            (year % 4 == 0) &&
            ( ((year % 100) != 0) || ((year % 400) == 0) )
           );    
}
    
int CDateTime::DaysInMonth(int year, int month)
{
    int days;

    switch(month)
    {
        case M_JAN:
        case M_MAR:
        case M_MAY:
        case M_JUL:
        case M_AUG:
        case M_OCT:
        case M_DEC:
            days = 31;
            break;

        case M_FEB:
            days = IsLeapYear(year) ? 29 : 28;  //闰年2月为29天
            break;

        case M_APR:
        case M_JUN:
        case M_SEP:
        case M_NOV:
            days = 30;
            break;

        default:
            //assert("Error in determining days in month");
            days = 30;
    }

    return days;
}

int CDateTime::DaysInYear(int year)
{
    return IsLeapYear(year) ? 366 : 365 ;
    
}

bool CDateTime::IsDateValid(int year, int month, int day)
{
    // 1~9999 Sanity check in year
    if ( year < 1 || year > 9999)
        return false;

    // 1~12 Check if month within range
    if (month < M_JAN || month > M_DEC)
        return false;

    // 1~(28/29/30/31) Check if day within range
    if (day < 1 || day > CDateTime::DaysInMonth(year, month))
        return false;
        
    return true;    
    
}

int CDateTime::DayCountInYear(int year, int month, int day) //计算某个日期在当年已经历的天数
{
    if(! CDateTime::IsDateValid(year,month,day))
        return -1;   
     
    int nSum=0;   
    for(int m=M_JAN;m<month;m++)
        nSum += CDateTime::DaysInMonth(year,m);

    nSum = nSum + day - 1 ;
    
    return nSum;    
}
    
bool CDateTime::IsValid()       //是否合法日期
{
    return CDateTime::IsDateValid(m_nYear,m_nMonth,m_nDay);     
}

bool CDateTime::IsLeapYear()    //是否闰年
{
    if(! IsValid())
        return false;
    
    return CDateTime::IsLeapYear(m_nYear);
   
}

bool CDateTime::IsEndOfMonth()  //是否月末最后一天
{
    if(! IsValid())
        return false;
    
    return (m_nDay == CDateTime::DaysInMonth(m_nYear,m_nMonth) ) ? true : false;
    
}

int CDateTime::GetDayInWeek()   //当前日期是星期几
{
    if(! IsValid())
        return -1;
        
    if(m_nYear < 1900)
        return -1;

    struct tm tm;
    tm.tm_year  = m_nYear - 1900;
    tm.tm_mon   = m_nMonth-1;
    tm.tm_mday  = m_nDay;
    tm.tm_hour  = 12;
    tm.tm_min   = 0;
    tm.tm_sec   = 0;
    tm.tm_isdst = -1;

    mktime(&tm);

    return tm.tm_wday;
}

int CDateTime::GetDayInYear()
{
    if(! IsValid())
        return -1;
        
    return CDateTime::DayCountInYear(m_nYear,m_nMonth,m_nDay);        
}

void CDateTime::operator+=(int nDays)
{
    struct tm tm;
    tm.tm_year  = m_nYear - 1900;
    tm.tm_mon   = m_nMonth-1;
    tm.tm_mday  = m_nDay;
    tm.tm_hour  = 12;
    tm.tm_min   = 0;
    tm.tm_sec   = 0;
    tm.tm_isdst = -1;

    time_t tOld = mktime(&tm);  
    
    long lSec = nDays*24*60*60;  
    time_t tNew = tOld + lSec;

    struct tm *tmTmp;
    tmTmp=localtime(&tNew);
  
    m_nYear  = tmTmp->tm_year + 1900;
    m_nMonth = tmTmp->tm_mon + 1;
    m_nDay   = tmTmp->tm_mday;
    
}

CDateTime operator+(const CDateTime& dt, int nDays)
{
	CDateTime tmp(dt);
	tmp += nDays;
    		
    return tmp;
}


void CDateTime::operator-=(int nDays)
{
    
    (*this) += ((-1)*nDays);
    
}

CDateTime operator-(const CDateTime& dt, int nDays)
{
	CDateTime tmp(dt);
	tmp -= nDays;
    		
    return tmp;
}

CString CDateTime::ToText(const char*  pFormat)
{
    CString strText,strFormat(pFormat); 
        
    if(strFormat == "YYYYMMDD")
    {
        strText.Format("%04d%02d%02d",GetYear(),GetMonth(),GetDay());               
    }
    else if(strFormat == "DDMMYYYY")
    {
        strText.Format("%02d%02d%04d",GetDay(),GetMonth(),GetYear());                
    }   
    else if(strFormat == "MMDDYYYY")
    {
         strText.Format("%02d%02d%04d",GetMonth(),GetDay(),GetYear());                
    }     
    else
    {
      ;  
    }  
    
    return  strText; 
}

CDateTime CDateTime::AddDays(const CDateTime& dt,int days)
{

    return (dt+days);
    
}

CDateTime CDateTime::AddMonths(const CDateTime& dt,int months)
{
    //计算月份，months可以为任意大小的整数，负数向前，正数向后。
    //若月份大于12或小于-12，自动调整年份以及月份
    //自动调整天数至月末
    
    int nTempYears  = months/12;                //初步计算调整的年份， 
    int nTempMonths = months%12;                //初步计算调整的月份，（-11~0~11）
    
    //1   2   3   4   5   6   7   8   9   10  11  12
    //13  14  15  16  17  18  19  20  21  22  23
    //    -10 -9  -8  -7  -6  -5  -4  -3  -2  -1  0
    
    int nYear  = dt.GetYear()  + nTempYears;    //调整年份，
    int nMonth = dt.GetMonth() + nTempMonths;   //调整月份， 
    if(nMonth > 12)                              
    {
        nMonth = nMonth%12;
        nYear += 1;
    }
    else if( nMonth < 1)
    {
        nMonth = nMonth + 12;
        nYear -= 1;
    }
        
    CDateTime tmp(dt);
    tmp.SetYear(nYear);  
    tmp.SetMonth(nMonth);  
    
    int nDays = CDateTime::DaysInMonth(nYear, nMonth);  
    if(tmp.GetDay() > nDays)                    //调整天
        tmp.SetDay(nDays); 
    
    return tmp;
    
}
  
CDateTime CDateTime::AddYears(const CDateTime& dt,int years)
{
    CDateTime tmp(dt);
    tmp.SetYear(dt.GetYear()+years);
    
    return tmp;
    
}    
    
    