//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : LUA封装类
//  @ File Name : luawrapper.h
//  @ Date : 2013/9/26
//  @ Author : Audisp
//
//


#if !defined(_LUAWRAPPER_H)
#define _LUAWRAPPER_H

#ifdef __cplusplus
extern "C" {
#endif

#include "include/lua.h"
#include "include/lualib.h"
#include "include/lauxlib.h"

#ifdef __cplusplus
}
#endif

class CLuaWrapper 
{
public:
	CLuaWrapper();
	 ~CLuaWrapper();	
    
public:
    int Init();                                         //初始化环境
    int RegisterFun(const char *name, lua_CFunction fn);//注册函数到脚本
	int RunScript(const char *spfile);                  //装载并运行脚本
    void Uninit();                                      //撤销
    
public:   
    inline bool         IsNumber(int idx)       { return lua_isnumber(m_pLuaVM,idx)==1 ? true:false; };
    inline bool         IsString(int idx)       { return lua_isstring(m_pLuaVM,idx)==1 ? true:false; };       
    inline lua_Number   ToNumber(int idx)       { return lua_tonumber(m_pLuaVM,idx); };
    inline lua_Integer  ToInteger(int idx)      { return lua_tointeger(m_pLuaVM,idx); };   
    inline const char*  ToString(int idx)       { return lua_tostring(m_pLuaVM,idx); };    

public:
    inline void     GetGlobal(const char* name) { lua_getglobal(m_pLuaVM,name); };
    inline int      GetTop()                    { return lua_gettop(m_pLuaVM); };
    inline void     SetTop(int idx)             { lua_settop(m_pLuaVM,idx); };  
    inline void     PushNumber(lua_Number n)    { lua_pushnumber(m_pLuaVM,n); }; 
    inline void     PushInteger(lua_Integer n)  { lua_pushinteger(m_pLuaVM,n); };     
    inline void     PushString(const char* s)   { lua_pushstring(m_pLuaVM,s); };    
    inline void     Pop(int n)                  { lua_pop(m_pLuaVM,n); };
 
public:       
    inline const char* GetErrorMsg()            { return m_szErrorMsg;  };
    inline int SendError()                      { return lua_error(m_pLuaVM); };
    inline void Attach(lua_State* p)            { m_pLuaVM = p; };
	inline lua_State* Detach()                  { lua_State* p=m_pLuaVM; m_pLuaVM=NULL; return p; };    
	
protected:    
    lua_State* m_pLuaVM;
    char m_szErrorMsg[1024];
 
};

#endif  //_LUAWRAPPER_H
