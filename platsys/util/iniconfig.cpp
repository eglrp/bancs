//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 技术平台公共类库
//  @ File Name : iniconfig.cpp
//  @ Date : 2013/7/15
//  @ Author : disp
//
//

#include <iostream>
//#include <iostream.h>
#include <fstream>

#include "iniconfig.h"

CIniConfig::CIniConfig()
{

}

CIniConfig::CIniConfig(const char* pFilePath)
{
	Init(pFilePath);
}

CIniConfig::~CIniConfig()
{
    	//printf("cic 1\n");
    Uninit();
    	//printf("cic 2\n");
}

int CIniConfig::Init(const char* pFilePath)
{

    ifstream in(pFilePath);
    if(in.fail())
        return -1;

	map<string,string> mapkv;
    string sTemp,sSection;
    while(getline(in, sTemp, '\n'))
    {
        string sLine = Trim(sTemp);
        if(sLine.empty() || sLine.at(0)=='#' || sLine.at(0)==';')
            continue;

        if(sLine.at(0)=='[')
        {
    		sSection = GetStrDivideBetween(sLine,"[","]");
    		mapkv.clear();

        }
        else if(sLine.find("=") != string::npos)
        {
            string key = Trim(GetStrWithDelim(sLine,0,"="));
            string value = Trim(GetStrWithDelim(sLine,1,"="));
            if(key.empty() || value.empty() || sSection.empty())
                continue;
						
			mapkv[key]=value;
			m_mapdata[sSection]=mapkv;
						
        }

    }
    in.close();
    return 0;

}

bool CIniConfig::IsInit()
{
    //m_mapdata.empty()    
 
    return m_mapdata.empty() ? false:true;   
}

int CIniConfig::GetData(const char* pSection, const char* pKey, char* pData)
{
    //map< string, map<string,string> > m_mapdata;
    map< string, map<string,string> >::iterator its = m_mapdata.find(pSection);
    if(its != m_mapdata.end() )	//找到section
    {
        map<string,string> mapkv = (*its).second;
        map<string,string>::iterator itkv = mapkv.find(pKey);
        if(itkv != mapkv.end() )	//找到key
        {
            string value =  (*itkv).second;
            strcpy(pData,value.c_str());
            return 0;
        }
        else
            return -1;

    }
    else
        return -1;

}


void CIniConfig::TestPrint()
{
		//遍历并打印
		map< string, map<string,string> >::iterator its;
		for (its = m_mapdata.begin(); its != m_mapdata.end(); its++ ) 
		{
				cout << "[" << its->first << "]" << endl;
				map<string,string> mapkv = its->second;
				
				map<string,string>::iterator itkv;
				for (itkv = mapkv.begin(); itkv != mapkv.end(); itkv++ ) 
				{
						cout << itkv->first << "=" << itkv->second << endl;				
				}			
		} 	
	
}

void CIniConfig::Uninit()
{
    if(m_mapdata.empty())
    {
        ;//printf("empty\n");
    }
    else
    {     
        //m_mapdata.clear();
 		map< string, map<string,string> >::iterator its;
		for (its = m_mapdata.begin(); its != m_mapdata.end(); its++ ) 
		{
				//printf("[%s]\n",(its->first).c_str());
				map<string,string> &mapkv = its->second;
				if(!mapkv.empty())
				    mapkv.clear();
			
		}   
		     
        m_mapdata.clear();  
     
     }
       
       
}


vector<string> CIniConfig::GetStrWithDelim(const string src, const string delims)
{
    return vector<string>();
}

string CIniConfig::GetStrWithDelim(const string src, const int pos,const string delims)
{
    char szSrc[1024]="";
    strcpy(szSrc,src.c_str());
    const char* pDelims = delims.c_str();
    char* token = strtok( szSrc, pDelims);

    int n=0;
    string target;
    while( token != NULL )
    {
        if(pos == n++)
        {
            target = token;
            break;
        }

        token = strtok( NULL, pDelims);
    }
    return target;


}
string CIniConfig::GetStrDivideBetween(const string src, const string leftdelim, const string rightdelim)
{
    string target;

    int leftloc,rightloc;
    leftloc = (int)src.find(leftdelim,0);
    if(leftloc != string::npos)
    {
        leftloc += (int)leftdelim.size();
        rightloc = (int)src.find(rightdelim,leftloc);
        if(rightloc != string::npos)
        {

            target = src.substr(leftloc,(rightloc-leftloc));
        }
    }

    return target;
}
