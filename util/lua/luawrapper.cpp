//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : LUA∑‚◊∞¿‡£¨lua 5.1.4
//  @ File Name : luawrapper.cpp
//  @ Date : 2013/9/26
//  @ Author : µ“…–≈Û
//
//


#include "luawrapper.h"
#include <string.h>
    
CLuaWrapper::CLuaWrapper() 
{
    m_pLuaVM = NULL;
    memset(m_szErrorMsg,0,1024);
}

CLuaWrapper::~CLuaWrapper()
{

}

int CLuaWrapper::Init()
{
    Uninit();
	
	/* initialize Lua */
	if(m_pLuaVM = lua_open())
	{
	    /* load Lua libraries */
	    luaL_openlibs(m_pLuaVM);
	    return 0;
	}
	else
	{
	    return -1;
    }
 
    
}

//typedef int (*lua_CFunction) (lua_State *L);
int CLuaWrapper::RegisterFun(const char *name, lua_CFunction fn)
{
    if(!m_pLuaVM)
        return -1;
        
	/* register our function */	
	lua_register(m_pLuaVM, name, fn);    
	return 0;  
    
}

int CLuaWrapper::RunScript(const char *spfile)
{
    if(!m_pLuaVM)
        return -1;
            
	/* run the script */
	if( luaL_dofile(m_pLuaVM, spfile) ==0)
	{ 
	    memset(m_szErrorMsg,0,1024);
	    return 0;
	}
	else
	{
	    const char* errstr=lua_tostring(m_pLuaVM,-1);
	    strncpy(m_szErrorMsg,errstr,1023);
	    lua_pop(m_pLuaVM, 1); 
	    
	    return -1;
	}   
    
}

void CLuaWrapper::Uninit()
{
    if(m_pLuaVM)
    {
        /* cleanup Lua */
	    lua_close(m_pLuaVM);
	    m_pLuaVM = NULL;
	}    
  
}
    
    
    
