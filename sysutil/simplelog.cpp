//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 技术平台公共类库
//  @ File Name : simplelog.cpp
//  @ Date : 2013/8/1
//  @ Author : disp
//
//

#include <unistd.h>
#include "simplelog.h"


CSimpleLog::CSimpleLog(void)
{
	m_pFile = NULL;
	m_pLockFile = NULL;
	m_nMaxSize = 5120; //KB

}

CSimpleLog::~CSimpleLog(void)
{
	Uninit();
}

#include <time.h>
bool CSimpleLog::GetCurrentDateTime(string& sDate,string& sTime)
{
	time_t curtime = time(NULL);
	if(curtime == 0)
		return false;

	char temp[24];
    struct tm *tm_now;
    tm_now=localtime(&curtime);
    tm_now->tm_year += 1900;
    tm_now->tm_mon ++;
    sprintf(temp,"%04d-%02d-%02d",tm_now->tm_year,tm_now->tm_mon,tm_now->tm_mday);
	sDate=string(temp);
    sprintf(temp,"%02d:%02d:%02d",tm_now->tm_hour,tm_now->tm_min,tm_now->tm_sec);
	sTime=string(temp);
	return true;
}


int CSimpleLog::Init(const string sLogFile,const string sLogFileOld,const string sLockFile,long nMaxSize)
{
	if(sLogFile.empty() || sLogFileOld.empty() || sLockFile.empty() || nMaxSize<=0)
	{
         m_sErrorStr ="Error(init): invalid param";
         return -1;
	}
		
	m_sLogFile=sLogFile;
	m_sLogFileOld=sLogFileOld;
	m_sLockFile = sLockFile;
	m_nMaxSize=nMaxSize;

	/*
	m_fo.open(sLogFile.c_str(),ios_base::app);
    if(! m_fo.is_open())
    {
         m_sErrorStr ="Error(init): open file "+sLogFile;
         return -1;
    } 
     */
  
	m_pLockFile = fopen(sLockFile.c_str(),"a");
    if(! m_pLockFile)
    {
         m_sErrorStr ="Error(Init): open lockfile "+sLockFile;
         return -1;
    }  
      
	return 0;
}
/*
int CSimpleLog::Write(const string sData)
{
	if(! m_fo.is_open())
	{
		m_fo.open(m_sLogFile.c_str(),ios_base::app);
	    if(! m_fo.is_open())
	    {
	         m_sErrorStr ="Error(write): open file "+m_sLogFile;
	         return -1;
	    } 		
	}

	m_fo.seekp (0, ios::end);
    long len = m_fo.tellp();
	if(len >= (m_nMaxSize*1024) ) //kb
	{
		m_fo.close();
        remove(m_sLogFileOld.c_str());
		rename(m_sLogFile.c_str(),m_sLogFileOld.c_str());

		m_fo.open(m_sLogFile.c_str(),ios_base::app);
		if(! m_fo.is_open())
		{
			 m_sErrorStr ="Error(write): open file "+m_sLogFile;
			 return -1;
		}  

	}
	
	//string date,time;
	//GetCurrentDateTime(date,time);
	//string tmp = date+" "+time+" "+sData;
	//m_fo<<tmp<<endl;
	
	m_fo<<sData;
	m_fo.flush();
	
	
	return 0;

}
*/

int CSimpleLog::Write(const string sData)
{
	return Write(sData.c_str());
}

int CSimpleLog::Write(const char* pData)
{
	if(!m_pLockFile)
		return -1;
		
	int fd = fileno(m_pLockFile);
	lockf(fd, F_LOCK, 0);	
		
	if(m_pFile)
		fclose(m_pFile);
		
	m_pFile = fopen(m_sLogFile.c_str(),"a");
    if(! m_pFile)
    {
         m_sErrorStr ="Error1(write): open file "+m_sLogFile;
      	        
         lockf(fd, F_ULOCK, 0);
         return -1;
    } 		


	fseek(m_pFile,0,SEEK_END);
	long len = ftell(m_pFile);
	if(len >= (m_nMaxSize*1024) ) //kb
	{
		fclose(m_pFile);
		m_pFile = NULL;
        remove(m_sLogFileOld.c_str());
		rename(m_sLogFile.c_str(),m_sLogFileOld.c_str());

		m_pFile = fopen(m_sLogFile.c_str(),"a");
	    if(! m_pFile)
	    {
	         m_sErrorStr ="Error2(write): open file "+m_sLogFile;
	        
	         lockf(fd, F_ULOCK, 0);
	         return -1;
	    }  

	}
		
	int nRet = fwrite( pData, strlen(pData), 1, m_pFile);	
	fflush(m_pFile);
	
	fclose(m_pFile);
	m_pFile = NULL;
	
	lockf(fd, F_ULOCK, 0);
		
	return 0;
		
}

void CSimpleLog::Uninit()
{
	//if(m_fo.is_open())
	//	m_fo.close();
	
	if(	m_pFile)
	{
		fclose(m_pFile);
		m_pFile = NULL;
	}
	
	if(	m_pLockFile)
	{
		fclose(m_pLockFile);
		m_pLockFile = NULL;
		//remove(m_sLockFile.c_str());
	}	
}