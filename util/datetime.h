//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 日期时间处理类
//  @ File Name : datetime.h
//  @ Date : 2014/5/6
//  @ Author : disp
//
//


#if !defined(_CDATETIME_H)
#define _CDATETIME_H


//=============================================================================
// Includes
//=============================================================================

#include <math.h>
#include <time.h>
#include "string.h"


//=============================================================================
// Classes
//=============================================================================

class CDateTime
{
// Class specific data
public:
    enum month_t
    {
        M_JAN = 1, M_FEB, M_MAR, M_APR, M_MAY, M_JUN,
        M_JUL    , M_AUG, M_SEP, M_OCT, M_NOV, M_DEC
    };

    enum weekday_t
    {
        WD_SUN = 0, WD_MON, WD_TUE, WD_WED, WD_THU, WD_FRI, WD_SAT
    };
    
// Constructors and destructor
public:
    CDateTime(void);
    CDateTime(const CDateTime & dtSrc);
    CDateTime(int year, int month, int day);
    CDateTime(int year, int month, int day, int hour, int minute, int second);
    virtual ~CDateTime(void);
 
public:  
    int GetYear() const       { return m_nYear;   };                //获取年
    int GetMonth() const      { return m_nMonth;  };                //获取月
    int GetDay()    const     { return m_nDay;    };                //获取日
    int GetHour()  const      { return m_nHour;   };                //获取时
    int GetMinute() const     { return m_nMinute; };                //获取分
    int GetSecond() const     { return m_nSecond; };                //获取秒 
    void SetYear(int year)       { m_nYear  = year;     }; 
    void SetMonth(int month)     { m_nMonth = month;    };
    void SetDay(int day)         { m_nDay   = day;      };
    void SetHour(int hour)       { m_nHour  = hour;     };
    void SetMinute(int minute)   { m_nMinute= minute;   };
    void SetSecond(int second)   { m_nSecond= second;   };     
    
public:
    static CDateTime FromText (const char* pSrc,const char*  pFormat="YYYYMMDD");  //YYYYMMDD、DDMMYYYY、MMDDYYYY
    static CDateTime GetCurrentTime();                              //获取系统当前日期，同Now()
    static CDateTime Now ();                                        //获取系统当前日期
    static bool IsDateValid(int year, int month, int day);          //检测指定日期是否有效
    static bool IsLeapYear(int year);                               //检测指定年份是否为闰年
    static int DaysInMonth(int year, int month);                    //返回指定月份的总天数 （28/29、30、31）
    static int DaysInYear(int year);                                //返回指定年份的总天数 （365、366）
    static int DayCountInYear(int year, int month, int day);        //返回指定日期在当年所经历的天数
    
public:
    static CDateTime AddDays    (const CDateTime& dt,int days);     //返回指定天数之后的 新CDateTime
    static CDateTime AddMonths  (const CDateTime& dt,int months);   //返回指定月数之后的 新CDateTime   
    static CDateTime AddYears   (const CDateTime& dt,int years);    //返回指定年数之后的 新CDateTime
                         
public:  
    bool IsValid();                                                 //是否合法日期
    bool IsLeapYear();                                              //是否闰年
    bool IsEndOfMonth();                                            //是否月末最后一天
    int GetDayInWeek();                                             //当前日期是星期几,0~
    int GetDayInYear();                                             //当前年份中经过的天数,0~

public:  
    CDateTime& operator= (const CDateTime&);                        //重载运算符 = 
	bool operator<(const CDateTime& ) const;	                    //重载运算符 <
	void operator+=(int nDays);									    //重载运算符 +=
	void operator-=(int nDays);									    //重载运算符 -=
    friend CDateTime operator+(const CDateTime& dt, int nDays );	//重载运算符 +	
    friend CDateTime operator-(const CDateTime& dt, int nDays );	//重载运算符 -	
    	
// Data
private:
    int m_nYear, m_nMonth, m_nDay, m_nHour, m_nMinute, m_nSecond;

public: 
    CString ToText(const char*  pFormat="YYYYMMDD");  //YYYYMMDD、DDMMYYYY、MMDDYYYY
        
};


#endif  //_CDATETIME_H

